primitives: 
    Int,
    Float,
    Char,
    Bool,
    Void,
    Struct


array types:
    [Int],
    [Float],
    [Char] -> String -> char*,
    [Struct],
    [Bool]


type conversions:
    bool -> int, 
    int <-> float (when float -> int, accuracy loss),
    int <-> char (when int -> char, accurasy loss)

flat type model, no automatic conversions


builtins:
    //cast
    IntToFloat,
    FloatToInt,
    BoolToInt,
    IntToBool,
    IntToChar,
    ChatToInt
    
    //streams
    print   - has formatting by default
    println - has formatting by default
    
    inputLine -> char*
    inputInt -> int
    inputFloat -> float
    
    //math
    sin,
    cos,
    tan,
    ctan,
    pow,
    sqrt
    
    
binary operations:
    plus ( + ):
        float,
        int,
        char
    minus ( - ):
        float,
        int,
        char
    div ( / ):
        float,
        int,
        char
    mul ( * ):
        float,
        int,
        char
        
    string_concatenation ( ^ ):
        string
        
    lte ( < ):
        float,
        int,
        char
    gte ( > ):
        float,
        int,
        char
    elte ( <= ):
        float,
        int,
        char
    egte ( >= ):
        float,
        int,
        char
    eq ( == ):
        bool,
        int,
        char,
        float
    neq ( != ):
        bool,
        int,
        char,
        float

cycles: not
recursion: yes

conditional:
    if { 
    
    } else if {
    
    } else {
    
    }
    
functions:
    general_functions:
    <visibility> fn <name: Id> (<arguments: []) (-> Type)? {
    
    }
    
    lyambda:
    let <name: Id> ( <arguments: [] ) (-> Type)? {
    
    }
    
variables: 
    only immutables
    typed or auto
    typed:
        <type: Type> <name: Id> = <cond: Condition>
    auto:
        let <name: Id> = <cond: Condition>
        

