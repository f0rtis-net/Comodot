use ast::*;
use tokens::Token;

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    
    enum Token<'input> {
		IDENTIFIER => Token::IDENTIFIER(<&'input str>),
        INTEGER => Token::INTEGER(<i64>),
        FLOAT => Token::FLOAT(<f64>),
        BOOL => Token::BOOL(<bool>),
        STR => Token::STR(<&'input str>),
        AND => Token::AND,
        OR => Token::OR,
        IF => Token::IF,
        ELSE => Token::ELSE,
        PLUS => Token::PLUS,
        MINUS => Token::MINUS,
        SLASH => Token::SLASH,
        STAR => Token::STAR,
        LBRACKET => Token::LBRACKET,
        RBRACKET => Token::RBRACKET,
        LRBRACKET => Token::LRBRACKET,
        RRBRACKET => Token::RRBRACKET,
        SEMICOLON => Token::SEMICOLON,
        FUNCTION => Token::FUNCTION,
        GT => Token::GT, 
        LT => Token::LT, 
        ASSIGN => Token::ASSIGN,
        EQ => Token::EQ,
        CONST => Token::CONST,
        PUBLIC => Token::PUBLIC,
        PRIVATE => Token::PRIVATE,
        RETURN => Token::RETURN,
        COMMA => Token::COMMA,
        COLON => Token::COLON,
        IMPORT => Token::IMPORT,
        EXTERN => Token::EXTERN,
        EXCLAMATION => Token::EXCLAMATION,
        VAL => Token::VAL
	}
}

pub Unit: ParsedFile<'input> = {
    <defs: (Definitions)*> => {
        ParsedFile {
            name: "",
            content: defs
        }
    }
};

Definitions: AstDefinitions<'input> = {
    IMPORT <find_target: (EXCLAMATION)?> <id: Id> => {
        let where_find = match find_target {
            Some(_) => "system",
            None => "local"
        };
        
        AstDefinitions::Import( ImportDirective {
            import_name: id,
            import_hash: "",
            target_found: where_find
        })
    },
    
    <function: FunctionDeclaration> => AstDefinitions::Function(function),
    
    <ext_del: ExternFunctionDeclaration> => AstDefinitions::Extern(ext_del),
};

ExternFunctionDeclaration: ExternFnDeclaration<'input> = {
    EXTERN FUNCTION <name: IDENTIFIER> <args: FunctionDeclArgs> <ret_type: (MINUS GT IDENTIFIER)?> SEMICOLON => {
        let ret_t = match ret_type {
            Some((_, _, _type)) => Token::IDENTIFIER(_type),
            None => Token::IDENTIFIER("Void")
        };
        
        ExternFnDeclaration {
            name,
            args,
            return_type: ret_t,
        }
    }
};

FunctionDeclaration: AstFunction<'input> = {
    <visible: (PUBLIC)?> FUNCTION <name: IDENTIFIER> <args: FunctionDeclArgs> <ret_type: (MINUS GT IDENTIFIER)?> <body: Block> => {
        let visibility_t = match visible {
            Some(_) => Token::PUBLIC,
            None => Token::PRIVATE
        };
        
        let ret_t = match ret_type {
            Some((_, _, _type)) => Token::IDENTIFIER(_type),
            None => Token::IDENTIFIER("Void")
        };
        
        AstFunction {
            name: String::from(name), 
            args,
            return_type: ret_t,
            visibility: visibility_t,
            body: Box::new(body)
        }
    },
}

FunctionDeclArgs: Vec<(&'input str, Token<'input>)> = {
    LBRACKET <arg0:(Id COLON IDENTIFIER)?> <args:(COMMA Id COLON IDENTIFIER)*> RBRACKET => {
        let mut all_args = vec![];
        
        if let Some((id, _, _type)) = arg0 {
            all_args.push((id, Token::IDENTIFIER(_type)));
            
            for (_, id, _, _type) in args {
                all_args.push((id, Token::IDENTIFIER(_type)));
            }
            
            return all_args;
        }

        all_args
    }
};

Statement: AstExpr<'input> = {
    <decl: VarDecl> SEMICOLON => decl,
    <ret: Return> SEMICOLON => ret,
    <cond: Conditional> => cond,
    
    <expr: ExpressionStatement> => expr
};

ExpressionStatement: AstExpr<'input> = {
    <expr: LogicalExpressions> SEMICOLON => expr
};

Conditional: AstExpr<'input> = {
    IF <cond: LogicalExpressions> <block: Block> => AstExpr::IfExpr(IfExpression {
        logic_condition: Box::new(cond),
        if_block: Box::new(block),
        else_block: None
    }),
    
    IF <cond: LogicalExpressions> <then_block: Block> ELSE <else_block: Block> => AstExpr::IfExpr(IfExpression {
        logic_condition: Box::new(cond),
        if_block: Box::new(then_block),
        else_block: Some(Box::new(else_block))
    }),
    
    IF <cond: LogicalExpressions> <then_block: Block> ELSE <else_block: Conditional> => AstExpr::IfExpr(IfExpression {
        logic_condition: Box::new(cond),
        if_block: Box::new(then_block),
        else_block: Some(Box::new(else_block))
    }),
};

PrimaryExprs: AstExpr<'input> = {
    <l: Literals> => l,
    <id: Id> => AstExpr::Identifier(<>), 
    
    <alias_id: Id> COLON COLON <id: Id> <args: CallArgs> => {
        AstExpr::Call(CallExpression{alias: Some(alias_id), name: id, args})
    },
    
    <id: Id> <args: CallArgs> => {
        AstExpr::Call(CallExpression{alias: None, name: id, args})
    },
    
    LBRACKET <expr: LogicalExpressions> RBRACKET => expr,
};

DivMulExpressions: AstExpr<'input> = {
    <l: DivMulExpressions> SLASH <r: PrimaryExprs> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::SLASH
        })
    },
    <l: DivMulExpressions> STAR <r: PrimaryExprs> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::STAR
        })
    },
    
    <primary: PrimaryExprs> => primary
};

PlusMinusExpressions: AstExpr<'input> = {
    <l: PlusMinusExpressions> PLUS <r: DivMulExpressions> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::PLUS
        })
    },
    <l: PlusMinusExpressions> MINUS <r: DivMulExpressions> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::MINUS
        })
    },
    
    <div_mul: DivMulExpressions> => div_mul
};

CallArgs: Vec<AstExpr<'input>> = {
    LBRACKET RBRACKET => vec![],
    
    LBRACKET <arg0: LogicalExpressions> <args: (COMMA LogicalExpressions)*> RBRACKET => {
        let mut vec = vec![arg0];
        for (_, arg) in args.into_iter() { vec.push(arg); }
		vec
    }
};

CompareExpressions: AstExpr<'input> = {
    <l: CompareExpressions> GT <r: PlusMinusExpressions> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::GT
        })
    },
    
    <l: CompareExpressions> LT <r: PlusMinusExpressions> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::LT
        })
    },
    
    <l: CompareExpressions> EQ <r: PlusMinusExpressions> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::EQ
        })
    },
    
    <a: PlusMinusExpressions> => a
};

LogicalExpressions: AstExpr<'input> = {
    <l: LogicalExpressions> AND <r: CompareExpressions> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::AND
        })
    },
    
    <l: LogicalExpressions> OR <r: CompareExpressions> => {
        AstExpr::Binary(BinaryExpression {
            lhs: Box::new(l),
            rhs: Box::new(r),
            operator: Token::OR
        })
    },
    
    <a: CompareExpressions> => a
};

VarDecl: AstExpr<'input> = {
    VAL <name: Id> <var_type: (COLON Id)?> ASSIGN <logical_exprs: LogicalExpressions> => {
        let _type = match var_type {
            Some((_, ty)) => Some(Token::IDENTIFIER(ty)),
            None => None
        };

        AstExpr::VarDef( VariableDefinition {
            name,
            ty: _type,
            content: Box::new(logical_exprs)
        })
    },
};

Return: AstExpr<'input> = {
    RETURN <ret_expr: (LogicalExpressions)?> => {
        let ret_ex = match ret_expr {
            Some(expr) => Some(Box::new(expr)),
            None => None
        };
        
        AstExpr::Return(ret_ex)
    }
};

Block: AstExpr<'input> = { 
    LRBRACKET RRBRACKET => AstExpr::Block(vec![]),
    
    LRBRACKET <stmt: Statement> <stmts: Statement*> RRBRACKET => {
        let mut statements = vec![stmt];
        
        for stmt1 in stmts {
            statements.push(stmt1);
        }
        
        AstExpr::Block(statements)
    }
};

Id: &'input str = { IDENTIFIER => <> };

Literals: AstExpr<'input> = {
    INTEGER => AstExpr::Integer(<>),
    FLOAT => AstExpr::Float(<>),
    BOOL => AstExpr::Bool(<>),
    STR => AstExpr::String(<>)
};