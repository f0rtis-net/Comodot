use ast::misc::file::ParsedFile;
use ast::AstNode;
use tokens::Token;
use ast::primitives::node::Node;
use ast::nodes::binary_expression::BinaryExpression;
use ast::nodes::real_literal::RealLiteral;
use ast::nodes::integer_literal::IntegerLiteral;
use ast::nodes::block_statement::BlockStatement;
use ast::nodes::function_literal::FunctionLiteral;

grammar<'input>(input: &'input str);

pub File: ParsedFile = {
    <nodes: (RootConstructions)*> => {
          ParsedFile::new(
            String::from("lol"),
            String::from("kek"),
            String::from("cheburek"),
            nodes
          )
    }
};

RootConstructions: AstNode = {
    (PUBLIC)? FUNCTION <func: Function> => func,
};

Function: AstNode = {
   <name: IDENTIFIER> LBRACKET RBRACKET GT <t: Type> <block: Block> => {
        let type_ =  match t {
            Token::UnknownType => panic!("Type error"),
            _ => t
        };

        FunctionLiteral { name: String::from(name), return_type: type_, body: block }.clone_boxed()
    }
};

Block: BlockStatement = {
    LRBRACKET RRBRACKET => BlockStatement{statements: vec![]},
    LRBRACKET <expr0: PlusMinus> <args: (SEMICOLON PlusMinus)*> (SEMICOLON)? RRBRACKET => {
        let mut vec = vec![expr0];
        for (_, arg) in args.into_iter() { vec.push(arg); }

        BlockStatement{statements: vec}
    }
};

PlusMinus: AstNode = {
    <a: PlusMinus> PLUS <b: DivMul> => BinaryExpression{left: a,right: b,operator: Token::PLUS}.clone_boxed(),
    <a: PlusMinus> MINUS <b: DivMul> => BinaryExpression{left: a,right: b,operator: Token::MINUS}.clone_boxed(),
    <a: DivMul> => a
};

DivMul: AstNode = {
    <a: DivMul> STAR <b: Expr> => BinaryExpression{left: a,right: b,operator: Token::STAR}.clone_boxed(),
    <a: DivMul> SLASH <b: Expr> => BinaryExpression{left: a,right: b,operator: Token::SLASH}.clone_boxed(),
    <a: Expr> => a
};

Expr: AstNode = {
    LBRACKET <e: PlusMinus> RBRACKET => e,
    INTEGER => IntegerLiteral { value: <> }.clone_boxed(),
    REAL => RealLiteral {value: <>}.clone_boxed(),

    <b: Block> => b.clone_boxed()
};

Type: Token = {
    <id: IDENTIFIER> => match id {
        "Int" => Token::IntType,
        "Void" => Token::VoidType,
        "Bool" => Token::BooleanType,
        "Char" => Token::CharType,
        id => Token::UnknownType
    }
};

extern {
    type Location = usize;

    enum Token {
        INTEGER => Token::INTEGER(<i64>),
        REAL => Token::REAL(<f64>),
        PLUS => Token::PLUS,
        MINUS => Token::MINUS,
        SLASH => Token::SLASH,
        STAR => Token::STAR,
        LBRACKET => Token::LBRACKET,
        RBRACKET => Token::RBRACKET,
        LRBRACKET => Token::LRBRACKET,
        RRBRACKET => Token::RRBRACKET,
        SEMICOLON => Token::SEMICOLON,
        FUNCTION => Token::FUNCTION,
        IDENTIFIER => Token::IDENTIFIER(<&'static str>),
        GT => Token::GT,
        LT => Token::LT,
        EQ => Token::EQ,
        CONST => Token::CONST,
        PUBLIC => Token::PUBLIC
    }
}


//init environment
    let context = Context::create();
    let module = context.create_module(file.get_name().as_str());
    let builder = context.create_builder();

    let mut visitor = CodegenVisitor {
        context: &context,
        module,
        builder: &builder,
        generated_value: None,
    };

    construct_print_function(& visitor);

    for expr in &file.expressions {
        expr.accept(&mut visitor);
    }

    //generate object file
    Target::initialize_all(&Default::default());

    let triple = TargetMachine::get_default_triple();

    visitor.module.set_triple(&triple);

    let path = Path::new("test.ll");

    visitor.module.print_to_file(path).unwrap();

    let target = Target::from_triple(&triple).unwrap();

    let machine = target.create_target_machine(
        &triple,
        "generic",
        "",
        OptimizationLevel::Default,
        RelocMode::Default,
        CodeModel::Default
    ).expect("Could not create target machine");

    let path = Path::new("output.o");

    machine.write_to_file(&visitor.module, FileType::Object, path).expect("Failed to write object file");